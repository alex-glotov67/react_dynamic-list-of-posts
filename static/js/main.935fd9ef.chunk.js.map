{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","api/posts.ts","components/Loader/Loader.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","api/users.ts","index.tsx"],"names":["PostsList","props","changePostId","selectedPostId","posts","className","map","post","userId","body","type","classNames","id","onClick","BASE_URL","getAllPosts","fetch","then","response","ok","Error","json","getPostComments","postId","Loader","NewCommentForm","addNewComment","useState","setBody","name","setName","email","setEmail","placeholder","value","onChange","event","target","handleNameChange","handleEmailChange","handleCommentChange","preventDefault","PostDetails","setPost","comments","setComments","isCommentsVisible","setIsCommentVisible","loader","setLoader","useEffect","find","removeComment","commentId","method","deleteComment","commentsFromServer","length","comment","newComment","headers","JSON","stringify","addComment","App","users","setUsers","setPosts","selectedUserID","setSelectedUserID","selectedPostID","setSelectedPostID","filter","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.935fd9ef.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport './PostsList.scss';\n\ninterface Props {\n  // selectedUserID: number;\n  changePostId: (postId: number) => void;\n  selectedPostId: number;\n  posts: Post[];\n}\n\nexport const PostsList: React.FC<Props> = (props) => {\n  const {\n    changePostId,\n    selectedPostId,\n    posts,\n  } = props;\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li\n            className=\"PostsList__item\"\n            key={post.id}\n          >\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.body}\n            </div>\n            <button\n              type=\"button\"\n              className={classNames(\n                'PostsList__button',\n                'button',\n                { 'PostsList__button--choosed': selectedPostId === post.id },\n              )}\n              onClick={() => {\n                if (selectedPostId === post.id) {\n                  changePostId(0);\n                } else {\n                  changePostId(post.id);\n                }\n              }}\n            >\n              {selectedPostId === post.id ? 'Close' : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n","import { BASE_URL } from './api';\n\nexport const getAllPosts = ():Promise<Post[]> => {\n  return fetch(`${BASE_URL}/posts`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Error');\n      }\n\n      return response.json();\n    });\n};\n\nexport const getUserPosts = (userId: number):Promise<Post[]> => {\n  return getAllPosts()\n    .then(posts => {\n      return posts.filter((post: Post) => post.userId === userId);\n    });\n};\n\nexport const getPostDetails = (postId: number):Promise<Post | null> => {\n  return getAllPosts()\n    .then(posts => {\n      return posts.find((post: Post) => post.id === postId) || null;\n    });\n};\n\nexport const getPostComments = (postId: number):Promise<Comment[]> => {\n  return fetch(`${BASE_URL}/comments?postId=${postId}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Error');\n      }\n\n      return response.json();\n    });\n};\n\nexport const addComment = (newComment: Partial<Comment>) => {\n  return fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(newComment),\n  });\n};\n\nexport const deleteComment = (commentId: number) => {\n  return fetch(`${BASE_URL}/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\n\ninterface Props {\n  postId: number;\n  addNewComment: (newComment: Partial<Comment>) => void;\n}\n\nexport const NewCommentForm: React.FC<Props> = (props) => {\n  const { postId, addNewComment } = props;\n  const [body, setBody] = useState('');\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n\n  const handleCommentChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setBody(event.target.value);\n  };\n\n  const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setName(event.target.value);\n  };\n\n  const handleEmailChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setEmail(event.target.value);\n  };\n\n  const reset = () => {\n    setBody('');\n    setName('');\n    setEmail('');\n  };\n\n  return (\n    <form className=\"NewCommentForm\">\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={(event) => handleNameChange(event)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={(event) => handleEmailChange(event)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={(event) => handleCommentChange(event)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n        value={body}\n        onClick={(event) => {\n          event.preventDefault();\n          addNewComment({\n            name,\n            email,\n            body,\n            postId,\n          });\n          reset();\n        }}\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\n// eslint-disable-next-line object-curly-newline\nimport { addComment, deleteComment, getPostComments, getPostDetails } from '../../api/posts';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ninterface Props {\n  selectedPostId: number;\n}\n\nexport const PostDetails: React.FC<Props> = (props) => {\n  const { selectedPostId } = props;\n  const [post, setPost] = useState({} as Post | null);\n  const [comments, setComments] = useState([] as Comment[]);\n  const [isCommentsVisible, setIsCommentVisible] = useState(true);\n  const [loader, setLoader] = useState(true);\n\n  useEffect(() => {\n    setLoader(true);\n\n    getPostDetails(selectedPostId)\n      .then(response => setPost(response));\n\n    getPostComments(selectedPostId)\n      .then(response => {\n        setComments(response);\n        setLoader(false);\n      });\n  }, [selectedPostId]);\n\n  const addNewComment = (newComment: Partial<Comment>) => {\n    addComment(newComment)\n      .then(() => getPostComments(selectedPostId))\n      .then(commentsFromServer => setComments(commentsFromServer));\n  };\n\n  const removeComment = (commentId: number) => {\n    deleteComment(commentId)\n      .then(() => getPostComments(selectedPostId))\n      .then(commentsFromServer => setComments(commentsFromServer));\n  };\n\n  const hideTriggerComments = () => {\n    setIsCommentVisible(!isCommentsVisible);\n  };\n\n  if (loader) {\n    return (\n      <Loader />\n    );\n  }\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n      <section className=\"PostDetails__post\">\n        <p>{post?.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button mb-5\"\n          onClick={() => hideTriggerComments()}\n        >\n          {isCommentsVisible ? 'Hide ' : 'Show '}\n          {`${comments.length} comments`}\n        </button>\n\n        <ul className=\"PostDetails__list\">\n          {isCommentsVisible && (\n            <>\n              {comments.map(comment => (\n                <li\n                  className=\"PostDetails__list-item\"\n                  key={comment.id}\n                >\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={(event) => {\n                      event.preventDefault();\n                      removeComment(comment.id);\n                    }}\n                  >\n                    X\n                  </button>\n                  <p>{comment.body}</p>\n                </li>\n              ))}\n            </>\n          )}\n        </ul>\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={selectedPostId}\n            addNewComment={addNewComment}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsers } from './api/users';\nimport { getAllPosts, getUserPosts } from './api/posts';\nimport { Loader } from './components/Loader';\n\nconst App: React.FC = () => {\n  const [users, setUsers] = useState([] as User[]);\n  const [posts, setPosts] = useState([] as Post[]);\n  const [selectedUserID, setSelectedUserID] = useState(0);\n  const [selectedPostID, setSelectedPostID] = useState(0);\n  // const [loading, setLoading] = useState(false);\n\n  const handleUserChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedUserID(+event.target.value);\n  };\n\n  const changePostId = (postId: number) => {\n    setSelectedPostID(postId);\n  };\n\n  useEffect(() => {\n    getUsers()\n      .then(response => setUsers(response));\n  }, []);\n\n  useEffect(() => {\n    // setLoading(true);\n\n    if (selectedUserID === 0) {\n      setPosts([] as Post[]);\n      getAllPosts()\n        .then(response => setPosts(response));\n    } else {\n      setPosts([] as Post[]);\n      getUserPosts(selectedUserID)\n        .then(response => setPosts(response));\n    }\n\n    // setLoading(true);\n  }, [selectedUserID]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={handleUserChange}\n          >\n            <option value={0}>All users</option>\n            {users.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {posts.length !== 0 ? (\n            <PostsList\n              changePostId={changePostId}\n              selectedPostId={selectedPostID}\n              posts={posts}\n            />\n          )\n            : <Loader />}\n\n        </div>\n\n        {selectedPostID !== 0 && (\n          <div className=\"App__content\">\n            <PostDetails selectedPostId={selectedPostID} />\n          </div>\n        )}\n\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { BASE_URL } from './api';\n\nexport const getUsers = ():Promise<User[]> => {\n  return fetch(`${BASE_URL}/users`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Error');\n      }\n\n      return response.json();\n    });\n};\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}